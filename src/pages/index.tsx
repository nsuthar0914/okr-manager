import Head from "next/head";
import { Inter } from "next/font/google";
import styles from "@/styles/Home.module.css";
import { mockUsers } from "../mock-data/mock-users";
import { useState } from "react";
import { ThemeMatch, UserMatch } from "./api/match-objectives";
import { NetworkGraph } from "@/components/NetworkGraph";
import { ObjectivesForm } from "@/components/ObjectivesForm";

const inter = Inter({ subsets: ["latin"] });

export default function Home() {
  const [loading, setLoading] = useState(false);
  const [users, setUsers] = useState(mockUsers);
  const [data, setData] = useState<{
    themeMatches: ThemeMatch[];
    userMatches: UserMatch[];
    themes: string[];
  }>();
  const checkAPI = async () => {
    const cachedData = localStorage.getItem("match-objectives-cache");
    const body = JSON.stringify({ users });
    if (cachedData) {
      const parsedData = JSON.parse(cachedData);
      if (parsedData?.[body]) {
        setData(parsedData?.[body]);
        return;
      }
    }
    setLoading(true);
    const results = await fetch("/api/match-objectives", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body,
      cache: "force-cache",
    });
    const newData = await results.json();
    setData(newData);
    if (cachedData) {
      const parsedData = JSON.parse(cachedData);
      parsedData[body] = newData;
      localStorage.setItem(
        "match-objectives-cache",
        JSON.stringify(parsedData)
      );
    } else {
      const parsedData = {};
      parsedData[body] = newData;
      localStorage.setItem(
        "match-objectives-cache",
        JSON.stringify(parsedData)
      );
    }
    setLoading(false);
    // const results = mockResponse;
    // setData(results);
  };
  console.log(data);
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <div className={styles.container}>
          <div className={styles.left}>
            <ObjectivesForm users={users} setUsers={setUsers} />
          </div>
          <div className={styles.right}>
            <button
              className={styles.Button}
              onClick={checkAPI}
              disabled={loading}
            >
              {data ? "Update alignment  " : "Get alignment  "}
              {loading && <div className={styles.loadingSpinner}></div>}
            </button>
            {data && <NetworkGraph {...data} />}
          </div>
        </div>
      </main>
    </>
  );
}
